C++ version of NHB code. 
This will be followed by a Julia version, perhaps developed in class this Spring. 
----------------------------------------------------------------------
2020-12-19
- Allow for floating dt for higher accuracy. 
  It is not clear how small dt must be to get accuracy to within 5%. 
  Approximating 1-exp(-beta*dt) by beta*dt is one source of approximation, 
  but is not clear whether the exponential form leads to errors and this must be tested. 

2020-12-24,5.17pm
- Add plots of R (individual Reproduction number) as a function of time in stats.py

--------------------------------------------
260 people initially infected. 
Random vaccination of susceptible people. 

1 vaccination daily 
No vaccinations (85): 
nb recovered: 189531

100 vaccinations daily: 
nb recovered: 188609
nb vaccinations: 7000 (almost no effect)

1000 vaccinations daily: 
total number recovered:  180754 (70% of pop)
total number vacc 1:  70752 (27% of pop)

10000 vaccinations daily: 
total number recovered:  108747 (41% of pop)
total number vacc 1:  151795 (58% of population)
Execution time 6 seconds

20000 vaccinations daily: 
total number recovered:  51159 (20% of pop)
nb vaccinated_1: 209383 (80% of pop)
Execution time 6 seconds

So to be more realistic, I should make vaccines 70% effective (regarding transmission rate), and allocate the second dose a fixe time after the first dose, and make the second dose 95% effective. For now, every iteration, I allocate a number of vaccines specified by a Poisson distribution with a mean set to a mean rate that is input into the parameters_0.txt file.
----------------------------------------------------------------------
2021-01-02,8.30pm
Implemented Vaccines. Give vaccine at a fixed rate over time. 1st dose, 2nd dose. 
For now, effect is 100%. 2nd dose has no effect. V1 state has no transmissibility. V1 state is equivalent to 
recovered state. 

What is \beta and what is \gamma. 
\beta is transmissibility (infectiousness). It affects the degree to which I can transmit the disease to 
somebody else. The vaccine will decrease \beta. Will make me less infectuous. That would decrease \beta. Thus, 
the probability of infecting somebody else is decreased. 
The vaccine will also make me less likely to catch the disease by boosting my immune system. That means that each 
person should have an "antigen" parameter in [0,1]. 
----------------------------------------------------------------------
More realistic simulation of vaccines: simply reduce transmissibility of vaccine.
If a vaccine if 50% effective, that would mean that beta is divided by two. 
If a vaccine if 95% effect, that would mean that beta is what? 
----------------------------------------------------------------------
2021-01-03,9.42am
Improved on inputting data (read parameter files). Created functions getFloat() and getInt(). 
This allows me to add a comment to lines in the file. 
----------------------------------------------------------------------
2021-01-06
0/day,     tot IS: 189765
10000/day, tot IS: 165179, c1=0.99
20000/day, tot IS: 122910, c1=0.99
25000/day, tot IS:  86274, c1=0.99
25000/day, tot IS: 117782, c1=0.90
25000/day, tot IS: 121286, c1=0.85
25000/day, tot IS: 151862, c1=0.70

I vaccinate n_vacc1 per day (dose 1 with efficacy c1). Beta ->
beta*(1-c1). Dose 2 has efficacy c2). Beta -> beta*(1-c2).
Recovery time is not impacted. In reality, recovery time should probably
be reduced (so infectuosity is reduced).
----------------------------------------------------------------------
Use of handles for fancy legends in read_data.py
----------------------------------------------------------------------
data_ge/run004/: epsilon_S-1=0.1 days, dt_btw_vac=28days, effectively: 0.6/0.95
data_ge/run005/: epsilon_S-1=3.0 days, dt_btw_vac=28days, effectively: 0.6/0.95
data_ge/run006/: epsilon_S-1=1.5 days, dt_btw_vac=28days, effectively: 0.6/0.95
data_ge/run007/: epsilon_S-1=0.5 days, dt_btw_vac=28days, effectively: 0.6/0.95

Simulations with shorter recovery times. The recovery rates are divided by (1-vac_recov_eff)
for first and second doses, and the vaccine recovery effectiveness is set equal to 
the vaccine effectiveness. Transmissions are multiplied by (1-eff), while recovery rates 
are divided by (1-eff). I do not know whether this is correct, or whether it should be
sqrt((1-eff). 

data_ge/run008/: epsilon_S-1=0.1 days, dt_btw_vac=28days, effectively: 0.6/0.95
data_ge/run009/: epsilon_S-1=0.5 days, dt_btw_vac=28days, effectively: 0.6/0.95
data_ge/run010/: epsilon_S-1=1.5 days, dt_btw_vac=28days, effectively: 0.6/0.95
data_ge/run011/: epsilon_S-1=3.0 days, dt_btw_vac=28days, effectively: 0.6/0.95

run00012/
    search_params['vac1_rate'] = [1000, 5000, 10000]
    search_params['max_nb_avail_doses'] = [10000, 50000, 100000]
    search_params['epsilonSinv'] = [0.5, 3.]

 2021-01-14, data_ge/project00015/: 
    Each run is repeated 5 times. 
    search_params['vacc1_rate'] = [10000, 20000]
    search_params = {}
    search_params['vacc1_rate'] = [10000, 20000]
    search_params['max_nb_avail_doses'] = [50000, 100000, 20000]
    search_params['epsilonSinv'] = [5.0]
    out_dicts = dict_product(search_params)
    global_dict["nb_repeat_runs"] = 3

 2021-01-17, data_ge/project00016/: 
    run_description = "betaISt, mu=5d, repeat=2, vary R0, vacc1_rate, max_nb_avail_doses, mu. Beta changes in time."}
	Objective: Understand the effect of time-varying beta(t). It is not clear how recovery time figures into this. I guess that as long as recovery is not complete, transmission follows its course. When beta is constant over a longer period, there are more infections, unless there are no more neighbors to infect (that is different than homogeneous mixing.

  2021-01-17,1.30pm, data_ge/project00017/:
    run_description = "Project17: Fixed beta, muinv=5d, repeat=2, vary R0, vacc1_rate, max_nb_avail_doses, mu. All other parameter are identical to Project16, each case is run only once since we are exploring parameter space."
	Code appears to take about 2x time time. 
    search_params['vacc1_rate'] = [5000 ,10000, 20000]
    search_params['max_nb_avail_doses'] = [50000, 100000, 200000]
    search_params['epsilonSinv'] = [0.5, 2., 4.0]
    search_params['muinv'] = [3.0, 5.0]
    search_params['R0'] = [2., 2.5, 3.0]
    run_description = "Project17: Fixed beta, muinv=5d, repeat=2, vary R0, vacc1_rate, max_nb_avail_doses, mu. All other parameter are identical to Project16, each case is run only once since we are exploring parameter space."

 2021-01-17,1.32pm, data_ge/project00018/:
   Objective: try to have a different beta profile per person. That means adding parameters 
   for person for the scale and shape. Start with using the shape and scale used now.
   The execution time does not seem to be affected.
----------------------------------------------------------------------
2021-01-10,6.37pm
I need to collect data from my output file. 
----------------------------------------------------------------------
2021-01-10,9.23pm
There must be an error since my code tells me the entire population was vaccinated. 
----------------------------------------------------------------------
2021-01-11
Other experiment to perform: 
- limit the maximum number of people receiving the vaccine.
- take reduced recovery time into account. So as vaccine efficiency c is 
  increased from 0, I multiply beta by (1-c), and divide mu by (1-c). 
  R = beta / mu is multiplied by (1-c)^2. 
- Note: we are only vaccinating Susceptibles. But in reality, we could 
  vaccinate Latent states since it is not know whether this person is infected
  or not. 
- There is no point infecting a R individual, since that person has antibodies that should protect the individual for a few months, which is on the order of the 90 days it takes for the infection to burn itself out without behavioral changes (masking, social distancing)
----------------------------------------------------------------------
2021-01-16
- run16: trying to incorportate time-dependent beta. But so far, my code produces only a few hundred infected. The approach 
  I am using is not correct. I am multiplying \beta_0 (constant = 0.2) by beta(tau) at each time step i*dt. Somehow, I am not sure. 
----------------------------------------------------------------------
2021-01-17,12.49pm
- Had a conversation with Derek. Discussed primarily the infectious profile. 
- How should recovery be treated? 
  - how did people treat recovery in the SIR population models that have time-dependent infectiousness? 
  - We could arbitrarily define recovery as when beta(t) (prob of infecting somebody in during a single day) is less than some prescribed tolerance \alpha, which could be an input parameter. Some value of \alpha might match the results of using a constant \beta over a fixed recovery time. Note that integral(beta) over recovery time is T_R * beta which should give individual R. I am not convinced my parameters are chosen properly. 
  - with beta(t), I use beta(tau) = w(tau) * R0 (see Ferretti)
  - Ferretti defines beta(t) as the sum of three terms (asymptomatic, presymptomatic, symptomatic, environment). So one can compute R_0 as the sum of four terms. 
  - Question: when environment factors are taken into account, how could we make these four quantities functions of time? 
  - Regarding vaccination: I could vaccinate when beta(t) is below a fixed threshold (this could define boundary between presymptomatic and symptomatic if we do not know s(\tau), the probably of being presymptomatic. 
  - Another question: should we consider the latent phase (the exposed state of SEIR)? Based on the beta(tau) curves, the latent phase is very small. 
----------------------------------------------------------------------
2021-01-17
From Ferretti: Quantifying SARS-COV-2 transmission ...
Distribution parameters: 
s(\tau): incubation period (infection to symptomatic): 
  lognormal meanlog: 1.644, 95% CI: [1.495-1.798] (avg: 0.747+0.899=1.646)
  lognormal sdlog: 0.363, 95% CI: [0.201-0.521] (avg: 0.1+0.26=0.36)
w(tau): generation time
  Weibull shape: 2.826, 95% CI: 1.75-4.7  (avg: 0.875+2.350=3.225)
  Weibull scale: 5.665, 95% CI: 4.7-6.9   (avg: 2.35+3.45=5.8)
Proportion asymptomatic: Pa   0.4, prior: beta (alpha=1.5, beta=1.75, mode: 0.4, mean: 0.46)
Relative infectiousness of asymptomatics: x_a:   0.1  prior: beta(1.5, 5.5)
Fraction of transmission that relates to environment: 0.1
Environment infectiousness: box function after time lag l (ell): 3 (I am ignoring this for now)
----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------
There is clearly a mistake related to max nb vaccination doses. 
